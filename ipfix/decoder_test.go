//: ----------------------------------------------------------------------------
//: Copyright (C) 2017 Verizon.  All Rights Reserved.
//: All Rights Reserved
//:
//: file:    decoder_test.go
//: details: TODO
//: author:  Mehrdad Arshad Rad
//: date:    02/01/2017
//:
//: Licensed under the Apache License, Version 2.0 (the "License");
//: you may not use this file except in compliance with the License.
//: You may obtain a copy of the License at
//:
//:     http://www.apache.org/licenses/LICENSE-2.0
//:
//: Unless required by applicable law or agreed to in writing, software
//: distributed under the License is distributed on an "AS IS" BASIS,
//: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//: See the License for the specific language governing permissions and
//: limitations under the License.
//: ----------------------------------------------------------------------------

package ipfix

import (
	"net"
	"reflect"
	"testing"
)

var tpl, optsTpl, multiMessage, unknownDatasetMessage []byte

func init() {
	// IPFIX packet including template SetID:2, 25 fields
	tpl = []byte{
		0x0, 0xa, 0x0, 0x7c, 0x58, 0x90, 0xd6, 0x40, 0x28, 0xf7,
		0xa0, 0x4a, 0x0, 0x0, 0x84, 0x0, 0x0, 0x2, 0x0, 0x6c, 0x1,
		0x0, 0x0, 0x19, 0x0, 0x8, 0x0, 0x4, 0x0, 0xc, 0x0, 0x4,
		0x0, 0x5, 0x0, 0x1, 0x0, 0x4, 0x0, 0x1, 0x0, 0x7, 0x0, 0x2,
		0x0, 0xb, 0x0, 0x2, 0x0, 0x20, 0x0, 0x2, 0x0, 0xa, 0x0, 0x4,
		0x0, 0x3a, 0x0, 0x2, 0x0, 0x9, 0x0, 0x1, 0x0, 0xd, 0x0, 0x1,
		0x0, 0x10, 0x0, 0x4, 0x0, 0x11, 0x0, 0x4, 0x0, 0xf, 0x0, 0x4,
		0x0, 0x6, 0x0, 0x1, 0x0, 0xe, 0x0, 0x4, 0x0, 0x1, 0x0, 0x8,
		0x0, 0x2, 0x0, 0x8, 0x0, 0x34, 0x0, 0x1, 0x0, 0x35, 0x0, 0x1,
		0x0, 0x98, 0x0, 0x8, 0x0, 0x99, 0x0, 0x8, 0x0, 0x88, 0x0, 0x1,
		0x0, 0xf3, 0x0, 0x2, 0x0, 0xf5, 0x0, 0x2,
	}
	// IPFIX packet including template SetID:3, 6 fields
	optsTpl = []byte{
		0x0, 0xa, 0x0, 0x34, 0x58, 0x6c, 0x2e, 0x4f, 0x0, 0x1d, 0x97,
		0x9e, 0x0, 0x0, 0x8b, 0x3, 0x0, 0x3, 0x0, 0x24, 0x2, 0x0, 0x0,
		0x6, 0x0, 0x1, 0x0, 0x90, 0x0, 0x4, 0x0, 0xa0, 0x0, 0x8, 0x0,
		0x82, 0x0, 0x4, 0x0, 0x83, 0x0, 0x10, 0x0, 0xd6, 0x0, 0x1, 0x0,
		0xd7, 0x0, 0x1, 0x0, 0x0,
	}

	// IPFIX packet with multiple template and data sets
	multiMessage = []byte{
		0x0, 0xa, 0x5, 0x56, 0x59, 0x6f, 0x2b, 0x2a, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1,
		// template set with 9 records starts here
		0x0, 0x2, 0x4, 0x8, 0x1, 0x0, 0x0, 0xb, 0x0, 0x8a, 0x0, 0x4, 0x0, 0x3d, 0x0, 0x1, 0x0, 0x38, 0x0, 0x6, 0x0, 0x50, 0x0, 0x6, 0x1, 0x0, 0x0, 0x2, 0x0,
		0xf0, 0x0, 0x1, 0x0, 0x9e, 0x0, 0x4, 0x0, 0x9f, 0x0, 0x4, 0x0, 0x2, 0x0, 0x8, 0x1, 0x60, 0x0, 0x8, 0x0, 0x88, 0x0, 0x1, 0x1, 0x1, 0x0, 0x12, 0x0,
		0x8a, 0x0, 0x4, 0x0, 0x3d, 0x0, 0x1, 0x0, 0x38, 0x0, 0x6, 0x0, 0x50, 0x0, 0x6, 0x1, 0x0, 0x0, 0x2, 0x0, 0xf0, 0x0, 0x1, 0x83, 0x7d, 0x0, 0x4, 0x0,
		0x0, 0x1a, 0xdc, 0x83, 0x7e, 0x0, 0x4, 0x0, 0x0, 0x1a, 0xdc, 0x83, 0x7f, 0x0, 0x1, 0x0, 0x0, 0x1a, 0xdc, 0x83, 0x80, 0x0, 0x2, 0x0, 0x0, 0x1a, 0xdc,
		0x83, 0x81, 0x0, 0x2, 0x0, 0x0, 0x1a, 0xdc, 0x83, 0x7b, 0x0, 0x1, 0x0, 0x0, 0x1a, 0xdc, 0x83, 0x7c, 0xff, 0xff, 0x0, 0x0, 0x1a, 0xdc, 0x0, 0x9e, 0x0,
		0x4, 0x0, 0x9f, 0x0, 0x4, 0x0, 0x2, 0x0, 0x8, 0x1, 0x60, 0x0, 0x8, 0x0, 0x88, 0x0, 0x1, 0x1, 0x6, 0x0, 0x17, 0x0, 0x8a, 0x0, 0x4, 0x0, 0x3d, 0x0,
		0x1, 0x0, 0x38, 0x0, 0x6, 0x0, 0x50, 0x0, 0x6, 0x1, 0x0, 0x0, 0x2, 0x0, 0xf0, 0x0, 0x1, 0x0, 0x3c, 0x0, 0x1, 0x0, 0xc0, 0x0, 0x1, 0x0, 0x4, 0x0, 0x1,
		0x0, 0xc3, 0x0, 0x1, 0x0, 0xc4, 0x0, 0x1, 0x0, 0x5, 0x0, 0x1, 0x0, 0x8, 0x0, 0x4, 0x0, 0xc, 0x0, 0x4, 0x0, 0x9e, 0x0, 0x4, 0x0, 0x9f, 0x0, 0x4, 0x0,
		0x2, 0x0, 0x8, 0x1, 0x60, 0x0, 0x8, 0x0, 0x88, 0x0, 0x1, 0x0, 0x1, 0x0, 0x8, 0x0, 0xc6, 0x0, 0x8, 0x0, 0x19, 0x0, 0x8, 0x0, 0x1a, 0x0, 0x8, 0x1, 0x7,
		0x0, 0x1e, 0x0, 0x8a, 0x0, 0x4, 0x0, 0x3d, 0x0, 0x1, 0x0, 0x38, 0x0, 0x6, 0x0, 0x50, 0x0, 0x6, 0x1, 0x0, 0x0, 0x2, 0x0, 0xf0, 0x0, 0x1, 0x0, 0x3c,
		0x0, 0x1, 0x0, 0xc0, 0x0, 0x1, 0x0, 0x4, 0x0, 0x1, 0x0, 0xc3, 0x0, 0x1, 0x0, 0xc4, 0x0, 0x1, 0x0, 0x5, 0x0, 0x1, 0x0, 0x8, 0x0, 0x4, 0x0, 0xc, 0x0,
		0x4, 0x83, 0x7d, 0x0, 0x4, 0x0, 0x0, 0x1a, 0xdc, 0x83, 0x7e, 0x0, 0x4, 0x0, 0x0, 0x1a, 0xdc, 0x83, 0x7f, 0x0, 0x1, 0x0, 0x0, 0x1a, 0xdc, 0x83, 0x80,
		0x0, 0x2, 0x0, 0x0, 0x1a, 0xdc, 0x83, 0x81, 0x0, 0x2, 0x0, 0x0, 0x1a, 0xdc, 0x83, 0x7b, 0x0, 0x1, 0x0, 0x0, 0x1a, 0xdc, 0x83, 0x7c, 0xff, 0xff, 0x0,
		0x0, 0x1a, 0xdc, 0x0, 0x9e, 0x0, 0x4, 0x0, 0x9f, 0x0, 0x4, 0x0, 0x2, 0x0, 0x8, 0x1, 0x60, 0x0, 0x8, 0x0, 0x88, 0x0, 0x1, 0x0, 0x1, 0x0, 0x8, 0x0,
		0xc6, 0x0, 0x8, 0x0, 0x19, 0x0, 0x8, 0x0, 0x1a, 0x0, 0x8, 0x1, 0x8, 0x0, 0x19, 0x0, 0x8a, 0x0, 0x4, 0x0, 0x3d, 0x0, 0x1, 0x0, 0x38, 0x0, 0x6, 0x0,
		0x50, 0x0, 0x6, 0x1, 0x0, 0x0, 0x2, 0x0, 0xf0, 0x0, 0x1, 0x0, 0x3c, 0x0, 0x1, 0x0, 0xc0, 0x0, 0x1, 0x0, 0x4, 0x0, 0x1, 0x0, 0xc3, 0x0, 0x1, 0x0,
		0xc4, 0x0, 0x1, 0x0, 0x5, 0x0, 0x1, 0x0, 0x8, 0x0, 0x4, 0x0, 0xc, 0x0, 0x4, 0x0, 0x7, 0x0, 0x2, 0x0, 0xb, 0x0, 0x2, 0x0, 0x9e, 0x0, 0x4, 0x0, 0x9f,
		0x0, 0x4, 0x0, 0x2, 0x0, 0x8, 0x1, 0x60, 0x0, 0x8, 0x0, 0x88, 0x0, 0x1, 0x0, 0x1, 0x0, 0x8, 0x0, 0xc6, 0x0, 0x8, 0x0, 0x19, 0x0, 0x8, 0x0, 0x1a, 0x0,
		0x8, 0x1, 0x9, 0x0, 0x20, 0x0, 0x8a, 0x0, 0x4, 0x0, 0x3d, 0x0, 0x1, 0x0, 0x38, 0x0, 0x6, 0x0, 0x50, 0x0, 0x6, 0x1, 0x0, 0x0, 0x2, 0x0, 0xf0, 0x0,
		0x1, 0x0, 0x3c, 0x0, 0x1, 0x0, 0xc0, 0x0, 0x1, 0x0, 0x4, 0x0, 0x1, 0x0, 0xc3, 0x0, 0x1, 0x0, 0xc4, 0x0, 0x1, 0x0, 0x5, 0x0, 0x1, 0x0, 0x8, 0x0, 0x4,
		0x0, 0xc, 0x0, 0x4, 0x0, 0x7, 0x0, 0x2, 0x0, 0xb, 0x0, 0x2, 0x83, 0x7d, 0x0, 0x4, 0x0, 0x0, 0x1a, 0xdc, 0x83, 0x7e, 0x0, 0x4, 0x0, 0x0, 0x1a, 0xdc,
		0x83, 0x7f, 0x0, 0x1, 0x0, 0x0, 0x1a, 0xdc, 0x83, 0x80, 0x0, 0x2, 0x0, 0x0, 0x1a, 0xdc, 0x83, 0x81, 0x0, 0x2, 0x0, 0x0, 0x1a, 0xdc, 0x83, 0x7b, 0x0,
		0x1, 0x0, 0x0, 0x1a, 0xdc, 0x83, 0x7c, 0xff, 0xff, 0x0, 0x0, 0x1a, 0xdc, 0x0, 0x9e, 0x0, 0x4, 0x0, 0x9f, 0x0, 0x4, 0x0, 0x2, 0x0, 0x8, 0x1, 0x60,
		0x0, 0x8, 0x0, 0x88, 0x0, 0x1, 0x0, 0x1, 0x0, 0x8, 0x0, 0xc6, 0x0, 0x8, 0x0, 0x19, 0x0, 0x8, 0x0, 0x1a, 0x0, 0x8, 0x1, 0xa, 0x0, 0x19, 0x0, 0x8a,
		0x0, 0x4, 0x0, 0x3d, 0x0, 0x1, 0x0, 0x38, 0x0, 0x6, 0x0, 0x50, 0x0, 0x6, 0x1, 0x0, 0x0, 0x2, 0x0, 0xf0, 0x0, 0x1, 0x0, 0x3c, 0x0, 0x1, 0x0, 0xc0,
		0x0, 0x1, 0x0, 0x4, 0x0, 0x1, 0x0, 0xc3, 0x0, 0x1, 0x0, 0xc4, 0x0, 0x1, 0x0, 0x5, 0x0, 0x1, 0x0, 0x8, 0x0, 0x4, 0x0, 0xc, 0x0, 0x4, 0x0, 0xb0, 0x0,
		0x1, 0x0, 0xb1, 0x0, 0x1, 0x0, 0x9e, 0x0, 0x4, 0x0, 0x9f, 0x0, 0x4, 0x0, 0x2, 0x0, 0x8, 0x1, 0x60, 0x0, 0x8, 0x0, 0x88, 0x0, 0x1, 0x0, 0x1, 0x0, 0x8,
		0x0, 0xc6, 0x0, 0x8, 0x0, 0x19, 0x0, 0x8, 0x0, 0x1a, 0x0, 0x8, 0x1, 0xb, 0x0, 0x20, 0x0, 0x8a, 0x0, 0x4, 0x0, 0x3d, 0x0, 0x1, 0x0, 0x38, 0x0, 0x6,
		0x0, 0x50, 0x0, 0x6, 0x1, 0x0, 0x0, 0x2, 0x0, 0xf0, 0x0, 0x1, 0x0, 0x3c, 0x0, 0x1, 0x0, 0xc0, 0x0, 0x1, 0x0, 0x4, 0x0, 0x1, 0x0, 0xc3, 0x0, 0x1, 0x0,
		0xc4, 0x0, 0x1, 0x0, 0x5, 0x0, 0x1, 0x0, 0x8, 0x0, 0x4, 0x0, 0xc, 0x0, 0x4, 0x0, 0xb0, 0x0, 0x1, 0x0, 0xb1, 0x0, 0x1, 0x83, 0x7d, 0x0, 0x4, 0x0, 0x0,
		0x1a, 0xdc, 0x83, 0x7e, 0x0, 0x4, 0x0, 0x0, 0x1a, 0xdc, 0x83, 0x7f, 0x0, 0x1, 0x0, 0x0, 0x1a, 0xdc, 0x83, 0x80, 0x0, 0x2, 0x0, 0x0, 0x1a, 0xdc, 0x83,
		0x81, 0x0, 0x2, 0x0, 0x0, 0x1a, 0xdc, 0x83, 0x7b, 0x0, 0x1, 0x0, 0x0, 0x1a, 0xdc, 0x83, 0x7c, 0xff, 0xff, 0x0, 0x0, 0x1a, 0xdc, 0x0, 0x9e, 0x0, 0x4,
		0x0, 0x9f, 0x0, 0x4, 0x0, 0x2, 0x0, 0x8, 0x1, 0x60, 0x0, 0x8, 0x0, 0x88, 0x0, 0x1, 0x0, 0x1, 0x0, 0x8, 0x0, 0xc6, 0x0, 0x8, 0x0, 0x19, 0x0, 0x8, 0x0,
		0x1a, 0x0, 0x8, 0x1, 0xc, 0x0, 0x18, 0x0, 0x8a, 0x0, 0x4, 0x0, 0x3d, 0x0, 0x1, 0x0, 0x38, 0x0, 0x6, 0x0, 0x50, 0x0, 0x6, 0x1, 0x0, 0x0, 0x2, 0x0,
		0xf0, 0x0, 0x1, 0x0, 0x3c, 0x0, 0x1, 0x0, 0xc0, 0x0, 0x1, 0x0, 0x4, 0x0, 0x1, 0x0, 0xc3, 0x0, 0x1, 0x0, 0xc4, 0x0, 0x1, 0x0, 0x5, 0x0, 0x1, 0x0,
		0x1b, 0x0, 0x10, 0x0, 0x1c, 0x0, 0x10, 0x0, 0x1f, 0x0, 0x4, 0x0, 0x9e, 0x0, 0x4, 0x0, 0x9f, 0x0, 0x4, 0x0, 0x2, 0x0, 0x8, 0x1, 0x60, 0x0, 0x8, 0x0,
		0x88, 0x0, 0x1, 0x0, 0x1, 0x0, 0x8, 0x0, 0xc6, 0x0, 0x8, 0x0, 0x19, 0x0, 0x8, 0x0, 0x1a, 0x0, 0x8,
		// 1 option template set with 2 records starts here (copied from optsTpl)
		0x0, 0x3, 0x0, 0x44, 0x2, 0x0, 0x0, 0x6, 0x0, 0x1, 0x0, 0x90, 0x0, 0x4, 0x0, 0xa0, 0x0, 0x8, 0x0, 0x82, 0x0, 0x4, 0x0, 0x83, 0x0, 0x10, 0x0, 0xd6,
		0x0, 0x1, 0x0, 0xd7, 0x0, 0x1, 0x0, 0x0, 0x2, 0x0, 0x0, 0x6, 0x0, 0x1, 0x0, 0x90, 0x0, 0x4, 0x0, 0xa0, 0x0, 0x8, 0x0, 0x82, 0x0, 0x4, 0x0, 0x83, 0x0,
		0x10, 0x0, 0xd6, 0x0, 0x1, 0x0, 0xd7, 0x0, 0x1, 0x0, 0x0,
		// Data set with 2 records starts here
		0x1, 0x8, 0x0, 0xc2,
		0x0, 0x0, 0x0, 0x2, 0x0, 0xfa, 0x16, 0x3e, 0xfc, 0x8b, 0xd4, 0xfa, 0x16, 0x3e, 0x6d, 0x85, 0x44, 0x8, 0x0, 0xe, 0x4, 0x40, 0x6,
		0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0xe, 0xa, 0x0, 0x0, 0x5, 0xd6, 0x5c, 0x9, 0x4c, 0x0, 0xb, 0x6c, 0x90, 0x0, 0xb, 0x6c, 0x90, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x1, 0x90, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0xa0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5d, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x15, 0xf9, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x3c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c, 0x0, 0x0, 0x0, 0x2, 0x0, 0xfa, 0x16, 0x3e, 0xfc, 0x8b, 0xd4, 0xfa, 0x16, 0x3e,
		0x6d, 0x85, 0x44, 0x8, 0x0, 0xe, 0x4, 0x40, 0x6, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0xe, 0xa, 0x0, 0x0, 0x5, 0xd6, 0x5c, 0x9, 0x4c, 0x0, 0xb, 0x6c, 0x90, 0x0,
		0xb, 0x6c, 0x90, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x90, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0xa0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5d, 0xc0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x15, 0xf9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c,
		// Data set with 1 record starts here
		0x1, 0x8, 0x0, 0x63, 0x0, 0x0, 0x0, 0x2, 0x0, 0xfa, 0x16, 0x3e, 0xfc, 0x8b, 0xd4, 0xfa, 0x16, 0x3e, 0x47, 0xb8, 0x29, 0x8, 0x0, 0xe, 0x4, 0x40, 0x6, 0x0,
		0x0, 0x0, 0xa, 0x0, 0x0, 0xe, 0xa, 0x0, 0x0, 0xc, 0x9, 0x4c, 0xe1, 0x30, 0x0, 0x6, 0x97, 0xe9, 0x0, 0x6, 0x97, 0xe9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1,
		0x90, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x67, 0x20, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x51, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x81, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x34, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x34}

	// IPFIX message with two datasets of id 264
	unknownDatasetMessage = []byte{
		0x0, 0xa, 0x5, 0x56, 0x59, 0x6f, 0x2b, 0x2a, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1,
		// Data set 1 starts here
		0x1, 0x8, 0x0, 0x63, 0x0, 0x0, 0x0, 0x2, 0x0, 0xfa, 0x16, 0x3e, 0xfc, 0x8b, 0xd4, 0xfa, 0x16, 0x3e, 0x6d, 0x85, 0x44, 0x8, 0x0, 0xe, 0x4, 0x40, 0x6,
		0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0xe, 0xa, 0x0, 0x0, 0x5, 0xd6, 0x5c, 0x9, 0x4c, 0x0, 0xb, 0x6c, 0x90, 0x0, 0xb, 0x6c, 0x90, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x1, 0x90, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0xa0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5d, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x15, 0xf9, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x3c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c,
		// Data set 2 starts here
		0x1, 0x8, 0x0, 0x63, 0x0, 0x0, 0x0, 0x2, 0x0, 0xfa, 0x16, 0x3e, 0xfc, 0x8b, 0xd4, 0xfa, 0x16, 0x3e, 0x47, 0xb8, 0x29, 0x8, 0x0, 0xe, 0x4, 0x40, 0x6, 0x0,
		0x0, 0x0, 0xa, 0x0, 0x0, 0xe, 0xa, 0x0, 0x0, 0xc, 0x9, 0x4c, 0xe1, 0x30, 0x0, 0x6, 0x97, 0xe9, 0x0, 0x6, 0x97, 0xe9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1,
		0x90, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x67, 0x20, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x51, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x81, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x34, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x34,
	}
}

func TestDecodeNoData(t *testing.T) {
	ip := net.ParseIP("127.0.0.1")
	mCache := GetCache("cache.file")
	body := []byte{}
	d := NewDecoder(ip, body)
	if _, err := d.Decode(mCache); err == nil {
		t.Error("expected err but nothing")
	}
}

func TestDecodeTemplate(t *testing.T) {
	ip := net.ParseIP("127.0.0.1")
	mCache := GetCache("cache.file")
	d := NewDecoder(ip, tpl)
	_, err := d.Decode(mCache)
	if err != nil {
		t.Error("unexpected error happened:", err)
	}
}

func TestDecodeOptsTemplate(t *testing.T) {
	ip := net.ParseIP("127.0.0.1")
	mCache := GetCache("cache.file")
	d := NewDecoder(ip, optsTpl)
	_, err := d.Decode(mCache)
	if err != nil {
		t.Error("unexpected error happened:", err)
	}
}

func BenchmarkDecodeTemplate(b *testing.B) {
	ip := net.ParseIP("127.0.0.1")
	mCache := GetCache("cache.file")
	for i := 0; i < b.N; i++ {
		d := NewDecoder(ip, tpl)
		d.Decode(mCache)
	}
}

func BenchmarkDecodeOptsTemplate(b *testing.B) {
	ip := net.ParseIP("127.0.0.1")
	mCache := GetCache("cache.file")
	for i := 0; i < b.N; i++ {
		d := NewDecoder(ip, optsTpl)
		d.Decode(mCache)
	}
}

func TestMultiMessage(t *testing.T) {
	ip := net.ParseIP("127.0.0.1")
	mCache := GetCache("cache.file")
	d := NewDecoder(ip, multiMessage)
	r, err := d.Decode(mCache)
	if err != nil {
		t.Error("unexpected error happened:", err)
	}
	if l := len(r.DataSets); l != 3 {
		t.Error("Expected 3 datasets, but received", l)
	}
	expectedSets := []int{256, 257, 262, 263, 264, 265, 266, 267, 268, 512}
	actualSets := mCache.allSetIds()
	if !reflect.DeepEqual(expectedSets, actualSets) {
		t.Error("Expected template sets:", expectedSets, ", but received:", actualSets)
	}
}

func TestUnknownDatasetsMessage(t *testing.T) {
	ip := net.ParseIP("127.0.0.1")
	mCache := GetCache("cache.file")
	d := NewDecoder(ip, unknownDatasetMessage)
	r, err := d.Decode(mCache)
	if l := len(r.DataSets); l != 0 {
		t.Error("Did not expect any result datasets, but got", l)
	}
	expectedErrorStr := `Multiple errors:
- 127.0.0.1 unknown ipfix template id# 264
- 127.0.0.1 unknown ipfix template id# 264`
	if err == nil || err.Error() != expectedErrorStr {
		t.Error("Received unexpected erorr:", err)
	}
}

func TestDecodeDataTpl(t *testing.T) {
	var payload = []byte{0, 10, 1, 32, 92, 88, 61, 168, 0, 1, 117, 38, 0, 0, 0, 0, 4, 0, 0, 120, 0, 0, 1, 104, 184, 176, 218, 137, 0, 0, 1, 104, 184, 176, 211, 113, 0, 0, 0, 0, 0, 0, 3, 72, 0, 0, 0, 0, 0, 0, 0, 10, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 2, 15, 216, 58, 215, 99, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 104, 184, 176, 218, 137, 0, 0, 1, 104, 184, 176, 211, 113, 0, 0, 0, 0, 0, 0, 3, 72, 0, 0, 0, 0, 0, 0, 0, 10, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 58, 215, 99, 10, 0, 2, 15, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 0, 0, 88, 0, 0, 1, 104, 184, 172, 62, 242, 0, 0, 1, 104, 184, 172, 62, 242, 0, 0, 0, 0, 0, 0, 0, 189, 0, 0, 0, 0, 0, 0, 0, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 128, 0, 0, 0, 0, 0, 0, 31, 12, 114, 32, 178, 94, 204, 189, 255, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 251, 0, 20, 233, 20, 233, 0, 17, 0, 0, 0, 4, 0, 0, 64, 0, 0, 1, 104, 184, 172, 62, 242, 0, 0, 1, 104, 184, 172, 62, 242, 0, 0, 0, 0, 0, 0, 0, 169, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 2, 15, 224, 0, 0, 251, 20, 233, 20, 233, 0, 0, 17, 0, 0, 0}
	var tpl = []byte{0, 10, 1, 32, 92, 88, 61, 152, 0, 1, 117, 22, 0, 0, 0, 0, 0, 2, 0, 68, 4, 0, 0, 15, 0, 153, 0, 8, 0, 152, 0, 8, 0, 1, 0, 8, 0, 2, 0, 8, 0, 60, 0, 1, 0, 10, 0, 4, 0, 14, 0, 4, 0, 61, 0, 1, 0, 8, 0, 4, 0, 12, 0, 4, 0, 7, 0, 2, 0, 11, 0, 2, 0, 5, 0, 1, 0, 6, 0, 1, 0, 4, 0, 1, 0, 2, 0, 68, 4, 1, 0, 15, 0, 153, 0, 8, 0, 152, 0, 8, 0, 1, 0, 8, 0, 2, 0, 8, 0, 60, 0, 1, 0, 10, 0, 4, 0, 14, 0, 4, 0, 61, 0, 1, 0, 8, 0, 4, 0, 12, 0, 4, 0, 7, 0, 2, 0, 11, 0, 2, 0, 5, 0, 1, 0, 6, 0, 1, 0, 4, 0, 1, 0, 2, 0, 68, 8, 0, 0, 15, 0, 153, 0, 8, 0, 152, 0, 8, 0, 1, 0, 8, 0, 2, 0, 8, 0, 60, 0, 1, 0, 10, 0, 4, 0, 14, 0, 4, 0, 61, 0, 1, 0, 27, 0, 16, 0, 28, 0, 16, 0, 5, 0, 1, 0, 7, 0, 2, 0, 11, 0, 2, 0, 6, 0, 1, 0, 4, 0, 1, 0, 2, 0, 68, 8, 1, 0, 15, 0, 153, 0, 8, 0, 152, 0, 8, 0, 1, 0, 8, 0, 2, 0, 8, 0, 60, 0, 1, 0, 10, 0, 4, 0, 14, 0, 4, 0, 61, 0, 1, 0, 27, 0, 16, 0, 28, 0, 16, 0, 5, 0, 1, 0, 7, 0, 2, 0, 11, 0, 2, 0, 6, 0, 1, 0, 4, 0, 1}

	ip := net.ParseIP("127.0.0.1")
	templates := GetCache("")
	d := NewDecoder(ip, tpl)
	_, err := d.Decode(templates)
	if err != nil {
		t.Error(err)
	}

	d = NewDecoder(ip, payload)
	_, err = d.Decode(templates)
	if err != nil {
		t.Error(err)
	}
}
